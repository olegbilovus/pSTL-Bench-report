@inproceedings{pSTL-Bench,
author = {Laso, Ruben and Krupitza, Diego and Hunold, Sascha},
title = {Exploring Scalability in C++ Parallel STL Implementations},
year = {2024},
isbn = {9798400717932},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3673038.3673065},
doi = {10.1145/3673038.3673065},
abstract = {Since the advent of parallel algorithms in the C++17 Standard Template Library (STL), the STL has become a viable framework for creating performance-portable applications. Given multiple existing implementations of the parallel algorithms, a systematic, quantitative performance comparison is essential for choosing the appropriate implementation for a particular hardware configuration. In this work, we introduce a specialized set of micro-benchmarks to assess the scalability of the parallel algorithms in the STL. By selecting different backends, our micro-benchmarks can be used on multi-core systems and GPUs. Using the suite, in a case study on AMD and Intel CPUs and NVIDIA GPUs, we were able to identify substantial performance disparities among different implementations, including GCC+TBB, GCC+HPX, Intel’s compiler with TBB, or NVIDIA’s compiler with OpenMP and CUDA.},
booktitle = {Proceedings of the 53rd International Conference on Parallel Processing},
pages = {284–293},
numpages = {10},
keywords = {C++, CUDA, OpenMP, Performance Portability, Standard Template Library, Threading Building Blocks},
location = {Gotland, Sweden},
series = {ICPP '24}
}